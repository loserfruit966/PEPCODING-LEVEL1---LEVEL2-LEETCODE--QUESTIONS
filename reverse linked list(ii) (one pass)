/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
       ListNode tt = null;
       ListNode th = null;

    public void addFirst(ListNode node) {
        if (th == null) {
            th = node;
            tt = node;
        } else {
            node.next = th;
            th = node;
        }
    }
    public ListNode reverseBetween(ListNode head, int n, int m) {
          if (head == null || head.next == null || m == n)
            return head;

        ListNode curr = head;
        ListNode prev = null;

        int idx = 1;
        while (idx < m) {
            while (idx >= n && idx <= m) {
                ListNode forw = curr.next;
                curr.next = null;

                addFirst(curr);

                curr = forw;
                idx++;
            }

            if (idx > m) {
                tt.next = curr;
                if (prev != null) {
                    prev.next = th;
                    return head;
                }

                return th;
            }
            idx++;
            prev = curr;
            curr = curr.next;
        }

        return head;
    }
}
